/* -------------------------- SIGNAL_MORSE -------------------------- */
/* base */
signal_morse([], []). 

/* 3+ ones */
signal_morse([1, 1, 1, 1 | L], M) :- signal_morse([1, 1, 1 | L], M).

/* 3 ones */
signal_morse([1, 1, 1 | L], M) :- 
	count_lead([1, 1, 1 | L], [], R), 
	R = [1, 1, 1],
	signal_morse(L, M1), 
	append(['-'], M1, M).

/* 2 ones goes to 1 one */
signal_morse([1, 1 | L], M) :- 
	count_lead([1, 1 | L], [], R), 
	R = [1, 1],
	signal_morse(L, M1), 
	append(['.'], M1, M).

/* 2 ones goes to 3 ones */
signal_morse([1, 1 | L], M) :- 
	count_lead([1, 1 | L], [], R), 
	R = [1, 1], 
	signal_morse(L, M1), 
	append(['-'], M1, M).

/* 1 1 */
signal_morse([1 | L], M) :- 
	count_lead([1 | L], [], R), 
	R = [1], 
	signal_morse(L, M1), 
	append(['.'], M1, M). 

/* 7+ zeroes */
signal_morse([0, 0, 0, 0, 0, 0, 0, 0 | L], M) :- 
	signal_morse([0, 0, 0, 0, 0, 0, 0 | L], M).

/* 7 zeroes */
signal_morse([0, 0, 0, 0, 0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0, 0, 0, 0, 0 | L], [], R), 
	R = [0, 0, 0, 0, 0, 0, 0], 
	signal_morse(L, M1), append(['#'], M1, M).

/* 6 zeroes goes to 7 zeroes */
signal_morse([0, 0, 0, 0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0, 0, 0, 0 | L], [], R),
	R = [0, 0, 0, 0, 0, 0],
	signal_morse(L, M1), append(['#'], M1, M).

/* 5 zeroes goes to 3 zeroes */ 
signal_morse([0, 0, 0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0, 0, 0 | L], [], R),
	R = [0, 0, 0, 0, 0],
	signal_morse(L, M1), append(['^'], M1, M).

/* 5 zeroes goes to 7 zeroes */ 
signal_morse([0, 0, 0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0, 0, 0 | L], [], R),
	R = [0, 0, 0, 0, 0],
	signal_morse(L, M1), append(['#'], M1, M).

/* 4 zeroes goes to 3 zeroes */
signal_morse([0, 0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0, 0 | L], [], R),
	R = [0, 0, 0, 0],
	signal_morse(L, M1), append(['^'], M1, M).

/* 3 zeroes */ 
signal_morse([0, 0, 0 | L], M) :- 
	count_lead([0, 0, 0 | L], [], R),
	R = [0, 0, 0],
	signal_morse(L, M1), append(['^'], M1, M).

/* 2 zeroes goes to 1 zero */
signal_morse([0, 0 | L], M) :- 
	count_lead([0, 0 | L], [], R), 
	R = [0, 0], 
	signal_morse(L, M).

/* 2 zeroes goes to 3 zeroes */
signal_morse([0, 0 | L], M) :- 
	count_lead([0, 0 | L], [], R), 
	R = [0, 0], 
	signal_morse(L, M1), append(['^'], M1, M).

/* 1 zero */
signal_morse([0 | L], M) :- 
	count_lead([0 | L], [], R),
	R = [0],
	signal_morse(L,  M). 

/* COUNT_LEAD */
/* return longest uninterrupted list of head element */
/* base cases */
count_lead([], L, L).
count_lead([H], Sofar, L) :-
	count_lead([], [H | Sofar], L).

/* element at which sequence changes */
count_lead([H1, H2 | _], Sofar, L) :- 
	H1 =\= H2,
	count_lead([], [H1 | Sofar], L).

/* sequence continues */
count_lead([H1, H2 | T], Sofar, L) :-
	H1 = H2,
	count_lead([H2 | T], [H1 | Sofar], L).

/* -------------------------- SIGNAL_MESSAGE -------------------------- */
/* base */
signal_message([], []). 

signal_message(L, M) :-
	signal_morse(L, R),
	translate(R, [], Mt),
	append([], Ms, Mt),
	clean_up(Ms, [], [], M).

/* TRANSLATE */
/* translate morse to letters */
/* arg1 is string generated by signal_morse */
/* arg2 is current letter */
/* arg3 is returned list */
translate([], C, M) :- 
	morse(A, C), 
	append([A], [], M).

/* add letter and reset arg2 */
translate(['^' | L], C, M) :- 
	morse(A, C), 
	translate(L, [], Mt), 
	append([A], Mt, M).

/* add letter, add hashtag, and reset arg2 */
translate(['#' | L], C, M) :- 
	morse(A, C), 
	translate(L, [], Mt), 
	append([A, '#'], Mt, M).

/* add head to current letter */
translate([H | T], C, M) :-
	append(C, [H], S),
	translate(T, S, M).

/* CLEAN_UP */
/* Clean up message by adjusting for errors */

/* arg1 is string generated by signal_message */
/* arg2 is the current, corrected list */
/* arg2 is current word */
/* arg4 is the final list */

/* assumption 1: error in the middle of a word: */
					/* invalidates entire word */
					/* starts new word */
/* assumption 2: all errors must be absent from final list */

clean_up([], C, W, F) :-
	append(C, W, F).

clean_up(['#' | L], C, W, F) :-
	append(C, W, F1),
	append(F1, ['#'], F2),
	clean_up(L, F2, [], F), !. 	/* cut to prevent backtrace from */
								/* unifying with [H|T] clean_up */
clean_up([error | L], C, _, F) :-
	clean_up(L, C, [], F), !.	/* cut (same reason) */

clean_up([H | T], C, W, F) :-
	append(W, [H], W1),
	clean_up(T, C, W1, F).


/* -------------------------- MORSE_CODES -------------------------- */
morse(a, [.,-]).           % A
morse(b, [-,.,.,.]).	   % B
morse(c, [-,.,-,.]).	   % C
morse(d, [-,.,.]).	   % D
morse(e, [.]).		   % E
morse('e''', [.,.,-,.,.]). % Ã‰ (accented E)
morse(f, [.,.,-,.]).	   % F
morse(g, [-,-,.]).	   % G
morse(h, [.,.,.,.]).	   % H
morse(i, [.,.]).	   % I
morse(j, [.,-,-,-]).	   % J
morse(k, [-,.,-]).	   % K or invitation to transmit
morse(l, [.,-,.,.]).	   % L
morse(m, [-,-]).	   % M
morse(n, [-,.]).	   % N
morse(o, [-,-,-]).	   % O
morse(p, [.,-,-,.]).	   % P
morse(q, [-,-,.,-]).	   % Q
morse(r, [.,-,.]).	   % R
morse(s, [.,.,.]).	   % S
morse(t, [-]).	 	   % T
morse(u, [.,.,-]).	   % U
morse(v, [.,.,.,-]).	   % V
morse(w, [.,-,-]).	   % W
morse(x, [-,.,.,-]).	   % X or multiplication sign
morse(y, [-,.,-,-]).	   % Y
morse(z, [-,-,.,.]).	   % Z
morse(0, [-,-,-,-,-]).	   % 0
morse(1, [.,-,-,-,-]).	   % 1
morse(2, [.,.,-,-,-]).	   % 2
morse(3, [.,.,.,-,-]).	   % 3
morse(4, [.,.,.,.,-]).	   % 4
morse(5, [.,.,.,.,.]).	   % 5
morse(6, [-,.,.,.,.]).	   % 6
morse(7, [-,-,.,.,.]).	   % 7
morse(8, [-,-,-,.,.]).	   % 8
morse(9, [-,-,-,-,.]).	   % 9
morse(., [.,-,.,-,.,-]).   % . (period)
morse(',', [-,-,.,.,-,-]). % , (comma)
morse(:, [-,-,-,.,.,.]).   % : (colon or division sign)
morse(?, [.,.,-,-,.,.]).   % ? (question mark)
morse('''',[.,-,-,-,-,.]). % ' (apostrophe)
morse(-, [-,.,.,.,.,-]).   % - (hyphen or dash or subtraction sign)
morse(/, [-,.,.,-,.]).     % / (fraction bar or division sign)
morse('(', [-,.,-,-,.]).   % ( (left-hand bracket or parenthesis)
morse(')', [-,.,-,-,.,-]). % ) (right-hand bracket or parenthesis)
morse('"', [.,-,.,.,-,.]). % " (inverted commas or quotation marks)
morse(=, [-,.,.,.,-]).     % = (double hyphen)
morse(+, [.,-,.,-,.]).     % + (cross or addition sign)
morse(@, [.,-,-,.,-,.]).   % @ (commercial at)

% Error.
morse(error, [.,.,.,.,.,.,.,.]). % error - see below

% Prosigns.
morse(as, [.,-,.,.,.]).          % AS (wait A Second)
morse(ct, [-,.,-,.,-]).          % CT (starting signal, Copy This)
morse(sk, [.,.,.,-,.,-]).        % SK (end of work, Silent Key)
morse(sn, [.,.,.,-,.]).          % SN (understood, Sho' 'Nuff)

